Compromised Database
- Strongly encrypt password with salt and hash (bcrypt)
- Strongly encrypt password reset tokens (SHA 256)

Brute Force Attacks
- Use bcrypt (to make login requests slow)
- Implement rate limiting (express-rate-limit)
- Implement maximum login attempts

Cross-Site Scripting (XSS) Attacks
- Store JWT in HTTPOnly cookies
- Sanitize user input data
- Set special HTTP headers (helmet package)

Denial of Service (DOS) Attacks
- Implement rate limiting (express-rate-limit)
- Limit body payload (in body-parser)
- Avoid evil regular expressions

NOSQL Query Injection
- Use mongoose for MongoDB (because of SchemaTypes)
- Sanitize user input data

Other Best Practices and Suggestions
- Always use HTTPS
- Create random password reset tokens with expiry dates
- Deny access to JWT after password change
- Don't commit sensitive config data to Git
- Don't send error details to clients

- Prevent Cross-Site Request Forgery (csurf package)
- Require re-authentication before a high-value action 
- Implement a blacklist of untrusted JWT
- Confirm user email address after first creating account
- Keep user logged in with refresh tokens 
- Implement two-factor authentication
- Prevent parameter pollution causing Uncaught Exception
